

translate(v = [-41.5000000000, 0, 0]) {
	rotate(a = [90, 0, 90]) {
		linear_extrude(center = true, height = 1.5000000000) {
			polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]], points = [[19.4012743538, 24.8491920712], [18.9930461828, 24.8288182502], [18.5888751667, 24.7678992714], [18.1927781387, 24.6670405750], [17.8086916891, 24.5272445399], [17.4404330414, 24.3499005221], [17.0916621157, 24.1367710459], [16.7658451541, 23.8899742880], [16.4662202718, 23.6119630254], [16.1957652757, 23.3055002589], [15.9571680689, 22.9736317531], [15.7527999377, 22.6196557664], [15.5846919844, 22.2470902712], [15.4545149413, 21.8596379906], [15.3635625664, 21.4611495997], [15.3127387854, 21.0555854550], [15.3050978114, 20.7491920712], [15.3025487076, 20.6469762351], [15.3330936067, 20.2393828822], [15.4040699139, 19.8368562420], [15.5147722345, 19.4433968052], [15.6641003593, 19.0629149484], [15.8505701983, 18.6991920712], [16.0723285304, 18.3558430151], [16.3271714216, 18.0362801371], [16.6125661289, 17.7436793967], [16.9256762715, 17.4809487916], [17.2633900199, 17.2506994566], [17.3012743538, 17.2300687479], [17.3012743538, 15.1542886943], [21.5012743538, 15.1542886943], [21.5012743538, 17.2300687479], [21.5391586877, 17.2506994566], [21.8768724361, 17.4809487916], [22.1899825787, 17.7436793967], [22.4753772860, 18.0362801371], [22.7302201772, 18.3558430151], [22.9519785093, 18.6991920712], [23.1384483483, 19.0629149484], [23.2877764731, 19.4433968052], [23.3984787937, 19.8368562420], [23.4694551009, 20.2393828822], [23.5000000000, 20.6469762351], [23.4974508962, 20.7491920712], [23.4898099222, 21.0555854550], [23.4389861411, 21.4611495997], [23.3480337663, 21.8596379906], [23.2178567232, 22.2470902712], [23.0497487699, 22.6196557664], [22.8453806387, 22.9736317531], [22.6067834319, 23.3055002589], [22.3363284358, 23.6119630254], [22.0367035535, 23.8899742880], [21.7108865919, 24.1367710459], [21.3621156661, 24.3499005221], [20.9938570185, 24.5272445399], [20.6097705689, 24.6670405750], [20.2136735409, 24.7678992714], [19.8095025248, 24.8288182502], [19.9317627857, 27.8280682408], [20.2839561989, 27.7928259743], [20.6339551260, 27.7400721241], [20.9808894145, 27.6699378447], [21.3238965310, 27.5825975007], [21.6621237059, 27.4782682342], [21.9947300531, 27.3572094241], [22.3208886607, 27.2197220417], [22.6397886472, 27.0661479023], [22.9506371769, 26.8968688154], [23.2526614314, 26.7123056354], [23.5451105307, 26.5129172156], [23.8272574004, 26.2991992669], [24.0984005789, 26.0716831258], [24.3578659615, 25.8309344334], [24.6050084764, 25.5775517287], [24.8392136883, 25.3121649612], [25.0598993262, 25.0354339241], [25.2665167309, 24.7480466144], [25.4585522189, 24.4507175223], [25.6355283597, 24.1441858547], [25.7970051628, 23.8292136976], [25.9425811714, 23.5065841214], [26.0718944605, 23.1770992342], [26.1846235370, 22.8415781872], [26.2804881387, 22.5008551386], [26.3592499310, 22.1557771797], [26.4207130997, 21.8072022285], [26.4647248376, 21.4559968974], [26.4911757248, 21.1030343381], [26.5000000000, 20.7491920712], [26.5000000000, 15.1542886943], [26.5000000000, -21.8457113057], [23.5000000000, -21.8457113057], [23.5000000000, -24.8457113057], [19.5000000000, -24.8457113057], [19.5000000000, -21.8457113057], [16.5000000000, -21.8457113057], [16.5000000000, -24.8457113057], [13.5000000000, -24.8457113057], [13.5000000000, -27.8457113057], [9.5000000000, -27.8457113057], [9.5000000000, -24.8457113057], [6.5000000000, -24.8457113057], [6.5000000000, -27.8457113057], [1.5000000000, -27.8457113057], [1.5000000000, -24.8457113057], [-11.0000000000, -24.8457113057], [-11.0000000000, -27.8457113057], [-23.5000000000, -27.8457113057], [-23.5000000000, -24.8457113057], [-23.5000000000, -14.8457113057], [-26.5000000000, -14.8457113057], [-26.5000000000, -4.8457113057], [-23.5000000000, -4.8457113057], [-23.5000000000, 5.1542886943], [-26.5000000000, 5.1542886943], [-26.5000000000, 15.1542886943], [12.3025487076, 15.1542886943], [12.3025487076, 20.7491920712], [12.3113729828, 21.1030343381], [12.3378238699, 21.4559968974], [12.3818356079, 21.8072022285], [12.4432987766, 22.1557771797], [12.5220605689, 22.5008551386], [12.6179251705, 22.8415781872], [12.7306542471, 23.1770992342], [12.8599675362, 23.5065841214], [13.0055435448, 23.8292136976], [13.1670203479, 24.1441858547], [13.3439964887, 24.4507175223], [13.5360319767, 24.7480466144], [13.7426493814, 25.0354339241], [13.9633350193, 25.3121649612], [14.1975402312, 25.5775517287], [14.4446827461, 25.8309344334], [14.7041481287, 26.0716831258], [14.9752913072, 26.2991992669], [15.2574381769, 26.5129172156], [15.5498872762, 26.7123056354], [15.8519115307, 26.8968688154], [16.1627600604, 27.0661479023], [16.4816600469, 27.2197220417], [16.8078186545, 27.3572094241], [17.1404250017, 27.4782682342], [17.4786521766, 27.5825975007], [17.8216592931, 27.6699378447], [18.1685935816, 27.7400721241], [18.5185925087, 27.7928259743], [18.8707859219, 27.8280682408], [19.2242982130, 27.8457113057], [19.5782504946, 27.8457113057]]);
		}
	}
}
translate(v = [41.5000000000, 0, 0]) {
	rotate(a = [90, 0, -90]) {
		linear_extrude(center = true, height = 1.5000000000) {
			polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]], points = [[-19.4012743538, 24.8491920712], [-19.8095025248, 24.8288182502], [-20.2136735409, 24.7678992714], [-20.6097705689, 24.6670405750], [-20.9938570185, 24.5272445399], [-21.3621156661, 24.3499005221], [-21.7108865919, 24.1367710459], [-22.0367035535, 23.8899742880], [-22.3363284358, 23.6119630254], [-22.6067834319, 23.3055002589], [-22.8453806387, 22.9736317531], [-23.0497487699, 22.6196557664], [-23.2178567232, 22.2470902712], [-23.3480337663, 21.8596379906], [-23.4389861411, 21.4611495997], [-23.4898099222, 21.0555854550], [-23.4974508962, 20.7491920712], [-23.5000000000, 20.6469762351], [-23.4694551009, 20.2393828822], [-23.3984787937, 19.8368562420], [-23.2877764731, 19.4433968052], [-23.1384483483, 19.0629149484], [-22.9519785093, 18.6991920712], [-22.7302201772, 18.3558430151], [-22.4753772860, 18.0362801371], [-22.1899825787, 17.7436793967], [-21.8768724361, 17.4809487916], [-21.5391586877, 17.2506994566], [-21.5012743538, 17.2300687479], [-21.5012743538, 15.1542886943], [-17.3012743538, 15.1542886943], [-17.3012743538, 17.2300687479], [-17.2633900199, 17.2506994566], [-16.9256762715, 17.4809487916], [-16.6125661289, 17.7436793967], [-16.3271714216, 18.0362801371], [-16.0723285304, 18.3558430151], [-15.8505701983, 18.6991920712], [-15.6641003593, 19.0629149484], [-15.5147722345, 19.4433968052], [-15.4040699139, 19.8368562420], [-15.3330936067, 20.2393828822], [-15.3025487076, 20.6469762351], [-15.3050978114, 20.7491920712], [-15.3127387854, 21.0555854550], [-15.3635625664, 21.4611495997], [-15.4545149413, 21.8596379906], [-15.5846919844, 22.2470902712], [-15.7527999377, 22.6196557664], [-15.9571680689, 22.9736317531], [-16.1957652757, 23.3055002589], [-16.4662202718, 23.6119630254], [-16.7658451541, 23.8899742880], [-17.0916621157, 24.1367710459], [-17.4404330414, 24.3499005221], [-17.8086916891, 24.5272445399], [-18.1927781387, 24.6670405750], [-18.5888751667, 24.7678992714], [-18.9930461828, 24.8288182502], [-18.8707859219, 27.8280682408], [-18.5185925087, 27.7928259743], [-18.1685935816, 27.7400721241], [-17.8216592931, 27.6699378447], [-17.4786521766, 27.5825975007], [-17.1404250017, 27.4782682342], [-16.8078186545, 27.3572094241], [-16.4816600469, 27.2197220417], [-16.1627600604, 27.0661479023], [-15.8519115307, 26.8968688154], [-15.5498872762, 26.7123056354], [-15.2574381769, 26.5129172156], [-14.9752913072, 26.2991992669], [-14.7041481287, 26.0716831258], [-14.4446827461, 25.8309344334], [-14.1975402312, 25.5775517287], [-13.9633350193, 25.3121649612], [-13.7426493814, 25.0354339241], [-13.5360319767, 24.7480466144], [-13.3439964887, 24.4507175223], [-13.1670203479, 24.1441858547], [-13.0055435448, 23.8292136976], [-12.8599675362, 23.5065841214], [-12.7306542471, 23.1770992342], [-12.6179251705, 22.8415781872], [-12.5220605689, 22.5008551386], [-12.4432987766, 22.1557771797], [-12.3818356079, 21.8072022285], [-12.3378238699, 21.4559968974], [-12.3113729828, 21.1030343381], [-12.3025487076, 20.7491920712], [-12.3025487076, 15.1542886943], [23.5000000000, 15.1542886943], [23.5000000000, 5.1542886943], [26.5000000000, 5.1542886943], [26.5000000000, -4.8457113057], [23.5000000000, -4.8457113057], [23.5000000000, -14.8457113057], [26.5000000000, -14.8457113057], [26.5000000000, -24.8457113057], [26.5000000000, -27.8457113057], [23.5000000000, -27.8457113057], [23.5000000000, -24.8457113057], [11.0000000000, -24.8457113057], [11.0000000000, -27.8457113057], [-1.5000000000, -27.8457113057], [-1.5000000000, -24.8457113057], [-9.5000000000, -24.8457113057], [-9.5000000000, -27.8457113057], [-13.5000000000, -27.8457113057], [-13.5000000000, -24.8457113057], [-16.5000000000, -24.8457113057], [-16.5000000000, -21.8457113057], [-19.5000000000, -21.8457113057], [-19.5000000000, -24.8457113057], [-23.5000000000, -24.8457113057], [-23.5000000000, -21.8457113057], [-26.5000000000, -21.8457113057], [-26.5000000000, 15.1542886943], [-26.5000000000, 20.7491920712], [-26.4911757248, 21.1030343381], [-26.4647248376, 21.4559968974], [-26.4207130997, 21.8072022285], [-26.3592499310, 22.1557771797], [-26.2804881387, 22.5008551386], [-26.1846235370, 22.8415781872], [-26.0718944605, 23.1770992342], [-25.9425811714, 23.5065841214], [-25.7970051628, 23.8292136976], [-25.6355283597, 24.1441858547], [-25.4585522189, 24.4507175223], [-25.2665167309, 24.7480466144], [-25.0598993262, 25.0354339241], [-24.8392136883, 25.3121649612], [-24.6050084764, 25.5775517287], [-24.3578659615, 25.8309344334], [-24.0984005789, 26.0716831258], [-23.8272574004, 26.2991992669], [-23.5451105307, 26.5129172156], [-23.2526614314, 26.7123056354], [-22.9506371769, 26.8968688154], [-22.6397886472, 27.0661479023], [-22.3208886607, 27.2197220417], [-21.9947300531, 27.3572094241], [-21.6621237059, 27.4782682342], [-21.3238965310, 27.5825975007], [-20.9808894145, 27.6699378447], [-20.6339551260, 27.7400721241], [-20.2839561989, 27.7928259743], [-19.9317627857, 27.8280682408], [-19.5782504946, 27.8457113057], [-19.2242982130, 27.8457113057]]);
		}
	}
}
translate(v = [0, 26.5000000000, 0]) {
	rotate(a = [90, 0, 0]) {
	}
}
translate(v = [0, -26.5000000000, 0]) {
	rotate(a = [90, 0, 180]) {
		linear_extrude(center = true, height = 1.5000000000) {
			polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]], points = [[40.0000000000, 11.5000000000], [43.0000000000, 11.5000000000], [43.0000000000, 1.5000000000], [40.0000000000, 1.5000000000], [40.0000000000, -8.5000000000], [43.0000000000, -8.5000000000], [43.0000000000, -18.5000000000], [43.0000000000, -21.5000000000], [40.0000000000, -21.5000000000], [40.0000000000, -18.5000000000], [30.0000000000, -18.5000000000], [30.0000000000, -21.5000000000], [20.0000000000, -21.5000000000], [20.0000000000, -18.5000000000], [10.0000000000, -18.5000000000], [10.0000000000, -21.5000000000], [0.0000000000, -21.5000000000], [0.0000000000, -18.5000000000], [-10.0000000000, -18.5000000000], [-10.0000000000, -21.5000000000], [-20.0000000000, -21.5000000000], [-20.0000000000, -18.5000000000], [-30.0000000000, -18.5000000000], [-30.0000000000, -21.5000000000], [-40.0000000000, -21.5000000000], [-40.0000000000, -18.5000000000], [-40.0000000000, -8.5000000000], [-43.0000000000, -8.5000000000], [-43.0000000000, 1.5000000000], [-40.0000000000, 1.5000000000], [-40.0000000000, 11.5000000000], [-43.0000000000, 11.5000000000], [-43.0000000000, 21.5000000000], [40.0000000000, 21.5000000000]]);
		}
	}
}
translate(v = [0, 0, 21.5000000000]) {
	rotate(a = [180, 0, 0]) {
	}
}
translate(v = [0, 0, -21.5000000000]) {
	rotate(a = [0, 0, 0]) {
		linear_extrude(center = true, height = 1.5000000000) {
			polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]], points = [[43.0000000000, 11.5000000000], [40.0000000000, 11.5000000000], [40.0000000000, -1.0000000000], [43.0000000000, -1.0000000000], [43.0000000000, -13.5000000000], [30.0000000000, -13.5000000000], [30.0000000000, -16.5000000000], [20.0000000000, -16.5000000000], [20.0000000000, -13.5000000000], [10.0000000000, -13.5000000000], [10.0000000000, -16.5000000000], [0.0000000000, -16.5000000000], [0.0000000000, -13.5000000000], [-10.0000000000, -13.5000000000], [-10.0000000000, -16.5000000000], [-20.0000000000, -16.5000000000], [-20.0000000000, -13.5000000000], [-30.0000000000, -13.5000000000], [-30.0000000000, -16.5000000000], [-40.0000000000, -16.5000000000], [-40.0000000000, -13.5000000000], [-40.0000000000, -1.0000000000], [-43.0000000000, -1.0000000000], [-43.0000000000, 11.5000000000], [-40.0000000000, 11.5000000000], [-40.0000000000, 16.5000000000], [43.0000000000, 16.5000000000]]);
		}
	}
}
translate(v = [0, 0, 20.0000000000]) {
	rotate(a = [0, 0, 0]) {
		linear_extrude(center = true, height = 1.5000000000) {
			polygon(paths = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], points = [[43.0000000000, 21.4012743538], [46.0000000000, 21.4012743538], [46.0000000000, 17.4012743538], [43.0000000000, 17.4012743538], [43.0000000000, 5.2038230614], [46.0000000000, 5.2038230614], [46.0000000000, -26.5000000000], [-46.0000000000, -26.5000000000], [-46.0000000000, 5.2038230614], [-43.0000000000, 5.2038230614], [-43.0000000000, 17.4012743538], [-46.0000000000, 17.4012743538], [-46.0000000000, 21.4012743538], [-43.0000000000, 21.4012743538], [-43.0000000000, 26.5000000000], [43.0000000000, 26.5000000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import svgwrite
import svgwrite.shapes
from solid import scad_render_to_file
from solid.objects import linear_extrude, part, polygon, translate, rotate

from .poly import Poly, offset_polygon
from .util import LEFT, RIGHT, BACK, FRONT

__author__ = 'Mark Weinreuter'

DEFAULT_COLORS = ((27, 158, 119), (217, 95, 2), (117, 112, 179), (231, 41, 138), (102, 166, 30), (230, 171, 2), (166, 118, 29), (102, 102, 102))

PIX_IN_MM = 0.264583333
MM_PIX_SCALE = 1 / PIX_IN_MM


def simple_algin(polys, pad=3, extras={}):
    """

    :param polys:
    :type polys:
    :param pad:
    :type pad:
    :return:
    :rtype:[Polygon]
    """
    nx = pad
    aligned = []
    ny = pad
    max_h = -1
    max_width = -1 if not ("max_width" in extras) else extras["max_width"]
    for poly in polys:
        if poly is None or len(poly) == 0:
            continue

        bb = poly.boundingBox()
        bw = (bb[RIGHT] - bb[LEFT])
        bh = (bb[FRONT] - bb[BACK])
        bw2 = bw / 2
        max_h = max(max_h, bh)

        if max_width > -1:
            if max_width < bw:
                max_width = bw + pad

            if max_width < nx + bw:
                ny += pad + max_h / 2 + bh / 2
                nx = pad
                max_h = bh

        nx += bw2  # half to middle
        aligned.append((nx, ny))
        nx +=  bw2 + pad  # half from middle

    return aligned


def poly_to_openscad(poly, board, shift=False):
    poly = poly.shifted() if shift and isinstance(poly, Poly) else poly
    points = []
    paths = []
    start = 0

    if poly is None or len(poly) == 0:
        return part()

    # collect all points in a list, create index list per contour
    for con in poly:
        points.extend(con)
        p_count = len(con)
        paths.append(list(range(start, start + p_count)))
        start += p_count
    return linear_extrude(height=board, center=True)(polygon(points, paths))


def gen_openscad_parts(extr_height, *args):
    def trans(x=0.0, y=0.0, z=0.0):
        return translate([x, y, z])

    def rot(x=0.0, y=0.0, z=0.0):
        if isinstance(x, (list, tuple)):
            return rotate(x)
        return rotate([x, y, z])

    model = part()
    for thing in args:
        if isinstance(thing, (list, tuple)):
            p = part()
            for t in thing:
                p.add(trans(*t.d3pos)(rot(*t.d3rot)(poly_to_openscad(t, extr_height))))
            model.add(p)
        else:
            model.add(trans(*thing.d3pos)(rot(*thing.d3rot)(poly_to_openscad(thing, extr_height))))

    return model


def to_openscad(path, extr_height, *args):
    return scad_render_to_file(gen_openscad_parts(extr_height, *args), path)


def write_svg(path, polys, laser_kerf=-.1, offset=True, align={"extras": {}}):
    if isinstance(polys, Poly):
        polys = (polys,)

    offseted_polys = [offset_polygon(p, laser_kerf if offset else 0) for p in polys]
    if "method" in align:
        align_data = align["method"](offset_polygon)
    else:
        align_data = simple_algin(offseted_polys, extras=align["extras"])

    bbs = [p.to_polygon().boundingBox() for p in offseted_polys]
    i = 0
    for bb in bbs:
        a = align_data[i]
        bbs[i] = bb[0] + a[0], bb[1] + a[0], bb[2] + a[1], bb[3] + a[1]
        i += 1
    bbs2 = list(zip(*bbs))

    d_off = 5
    min_x, max_x = min(bbs2[LEFT])-d_off, max(bbs2[RIGHT]) + d_off
    min_y, maxy = min(bbs2[BACK]) - d_off, max(bbs2[FRONT]) + d_off
    x_dim, y_dim = max_x - min_x, maxy - min_y
    dwg = svgwrite.Drawing(filename=path, size=(str(x_dim) + "mm", str(y_dim) + "mm"), debug=True)

    dwg.viewbox(min_x, min_y, x_dim, y_dim)

    for i, poly in enumerate(offseted_polys):
        align = align_data[i]
        group = svgwrite.container.Group(transform="translate(%g, %g)" % align)
        for i, contour in enumerate(poly):
            col = DEFAULT_COLORS[poly.isHole(i)]
            pa = svgwrite.path.Path("M %g %g" % contour[0], fill="none", stroke="rgb(%g, %g, %g)" % col)
            for point in contour[1:]:
                pa.push("L %g %g " % point)
            pa.push("z")
            group.add(pa)
        for extra in poly.svg_extras:
            group.add(extra)
        dwg.add(group)
    file = open(path, "w")
    dwg.write(file)
    file.close()
 
 
************************************************/
